AWSTemplateFormatVersion: 2010-09-09
Description: Spdataservice - VPC Set up.
Parameters:
  Service:
    Type: String
    Default: spdataservice
  environment:
    Type: String
    Default: dev
  envId:
    AllowedValues: ["spds01", "spds02"]
    Type: String
    Default: spds01
  AvailabilityZone1a:
    Type: String
    Default: ap-northeast-1a
  AvailabilityZone1c:
    Type: String
    Default: ap-northeast-1c
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  HTTPPort:
    Type: Number
    Default: 8080


Resources: 

# ##################################################
# ## VPC
# ##################################################

  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: !Sub ${envId}-${environment}-vpc
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment 

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZone1a
      Tags: 
        - Key: Name
          Value: !Sub ${envId}-${environment}-private-subnet-a
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZone1c
      Tags: 
        - Key: Name
          Value: !Sub ${envId}-${environment}-private-subnet-c
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment


# ##################################################
# ## InternetGateway
# ##################################################

  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${envId}-${environment}-igw
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment

  InternetGWAtt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGW


# ##################################################
# ## NatGateway
# ##################################################

  NatGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGW1EIP.AllocationId
      SubnetId: !Ref PrivateSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${envId}-${environment}-natgw01
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment

  NatGW1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC

  Spds01DevNatGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGW2EIP.AllocationId
      SubnetId: !Ref PrivateSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${envId}-${environment}-natgw02
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment

  NatGW2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC


# ##################################################
# ## RouteTable
# ##################################################

  PrivateRtb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${envId}-${environment}-private-rtb01
        - Key: Service
          Value: !Ref Service
        - Key: environment
          Value: !Ref environment
    DependsOn: InternetGWAtt

  PrivateRouteIgw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRtb
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW
    DependsOn: InternetGWAtt

  SubnetAPrivateRtbAss:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRtb

  SubnetCPrivateRtbAss:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRtb


# ##################################################
# ## VPC SecurityGroup
# ##################################################

  VpcSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP inbound traffic to private instances'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPPort
          ToPort: !Ref HTTPPort
          CidrIp: "0.0.0.0/0"

  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroups:
        - !Ref VpcSG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${envId}-${environment}-ALB

Outputs:

  Spds01DevVpcOutput:
    Value: !Ref VPC
    Export:
      Name: !Sub ${envId}-${environment}-VPC

  VPCCidr:
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub ${envId}-${environment}-VPC-CIDR

  Spds01DevPubSubnet1Output:
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${envId}-${environment}-Private-Subnet-A

  Spds01DevPubSubnet2Output:
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${envId}-${environment}-Private-Subnet-C

  Spds01DevPubRtbOutput:
    Value: !Ref PrivateRtb
    Export:
      Name: !Sub ${envId}-${environment}-Private-RTB

  Spds01DevVpcSGOutput:
    Value: !Ref VpcSG
    Export:
      Name: !Sub ${envId}-${environment}-VPC-SG

  Spds01DevVpcALBOutput:
    Description: Application Load Balancer ID
    Value: !Ref ALB
    Export:
      Name: !Sub ${envId}-${environment}-ALB
